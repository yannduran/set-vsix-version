# yaml-language-server: $schema=https://json.schemastore.org/github-action.json
name: "Set VSIX Version Number"
description: "Sets the version number in the VSIX manifest and generated code-behind file (if one exists)"
author: "Yann Duran <>"
branding:
  icon: hash
  color: purple

inputs:
  version-number:
    description: "Version number to set"
    required: false
    type: string
    default: ""

  development-version:
    description: "Development version number"
    required: false
    type: string
    default: ""

  production-version:
    description: "Production version number"
    required: false
    type: string
    default: ""

  production-tag:
    description: "A regex expression that defines a valid production tag"
    required: false
    type: string
    default: "**"

  github-ref:
    description: "The repo's git ref"
    required: false
    type: string
    default: ""

  manifest-file-path:
    description: "Path to VSIX manifest file (source.extension.vsixmanifest)"
    required: true
    type: string
    default: src/vsix/source.extension.vsixmanifest

  code-file-path:
    description: "Path to generated code file (source.extension.vs)"
    required: false
    type: string
    default: src/vsix/source.extension.cs

outputs:
  version-number:
    description: "The version that was set in the VSIX manifest/code file(s)"

runs:
  using: "composite"

  steps:
    - name: Set version in VSIX manifest and file (if it exists)
      id: set-version
      shell: pwsh

      run: |
        #region functions
            function LogInfo {
              [CmdletBinding()]
              param(
                [Parameter(Mandatory=$true, Position=0)]
                [string]$message
                )
              
              Write-Host "INFO: ${message}" -ForegroundColor Magenta
            }
            
            function LogError {
              [CmdletBinding()]
              param(
                [Parameter(Mandatory=$true, Position=0)]
                [string]
                $message
                )
              
              Write-Host "ERROR: ${message}" -ForegroundColor Yellow
            }
            
            function LogException {
              [CmdletBinding()]
              param(
                [Parameter(Mandatory=$true, Position=0)]
                [string]$message
                )
              
              Write-Host "EXCEPTION: ${message}" -ForegroundColor Red
            }
            
            function LogDate {
              [CmdletBinding()]
              param(
                [Parameter(Mandatory=$true, Position=0)]
                [string]$prefix
                )
              
              Write-Host "INFO: ${prefix} $(Get-Date -Format $dateFormat)" -ForegroundColor Magenta
            }

            function GetTextBetween {
              # https://powershellone.wordpress.com/2021/02/24/using-powershell-and-regex-to-extract-text-between-delimiters/

              [CmdletBinding()]
              param( 
                [Parameter(Mandatory, ValueFromPipeline = $true, Position = 0)]   
                [string]$Text,
                [Parameter(Position = 1)] 
                [char]$delimeter = '"'
              )
              $pattern = "(?<=\$delimeter).+?(?=\$delimeter)"

              return [regex]::Matches($Text, $pattern).Value
            }

            function GetManifestVersion {
              param([string]$path)

              $value = select-string -Path $path -Pattern $manifestRegex -AllMatches `
                | ForEach-Object { $_.Matches } | ForEach-Object { $_.Value }

              if ($value -eq $n) {
                return ''
              } else {
                return $value.Replace(' Language=','')
              }
            }

            function GetCodeVersion {
              param([string]$path)
              $value = select-string -Path $path -Pattern $codeRegex -AllMatches `
                | ForEach-Object { $_.Matches } | ForEach-Object { $_.Value }

              if ($value -eq '') {
                return ''
              } else {
                return $value
              }
            }

            function ShowResults {
              [CmdletBinding()]
              param (
                [string] $manifestVersionBefore = '?',
                [string] $manifestVersionAfter = '?', 
                [bool]   $codeFilePathExists = $true,
                [string] $codeVersionBefore = '?',
                [string] $codeVersionAfter = '?'
              )
              
              LogInfo("-------------")
              LogInfo("Manifest file")
              LogInfo("-------------")
              LogInfo(" - before: $manifestVersionBefore")
              LogInfo(" - after : $manifestVersionAfter")

              if ($codeFilePathExists -eq $true) {
                LogInfo("---------")
                LogInfo("Code file")
                LogInfo("---------")
                LogInfo(" - before: $codeVersionBefore")
                LogInfo(" - after : $codeVersionAfter")
              }
            }
          #endregion

        #region init
          LogDate "Started at"  

          #region inputs
          $versionNumber = "'${{ inputs.version-number }}'"
          $developmentVersion = "'${{ inputs.development-version }}'"
          $productionVersion = "'${{ inputs.production-version }}'"
          $productionTag = "'${{ inputs.production-tag }}'"
          $gitRef = "'${{ inputs.git-ref }}'"
          $manifestFilePath = "${{ inputs.manifest-file-path }}"
          $codeFilePath = "${{ inputs.code-file-path }}"

          LogInfo "------"
          LogInfo "Inputs"
          LogInfo "------"

          if ($versionSpecified -eq $true) { 
            LogInfo " - version-number      = $versionNumber" 
          }
          else { 
            LogInfo " - version-number      = ''"
          }

          LogInfo " - development-version = $developmentVersion"
          LogInfo " - production-version  = $productionVersion"
          LogInfo " - production-tag      = $productionTag"
          LogInfo " - git-ref             = $gitRef"
          LogInfo " - manifest-file-path  = $manifestFilePath"
          LogInfo " - code-file-path      = $codeFilePath"
          #endregion

          #region constants
            $dateFormat = 'yyyy-MMM-dd HH:mm:ss'
            $tags = 'refs/tags/'
            $heads = 'refs/heads/'
            $versionRegex = '([0-9\\.]+)'
            $manifestRegex = 'Version="' + $versionRegex + '" Language='
            $codeRegex = 'Version = "' + $versionRegex + '"'
            $versionSpecified = ($versionNumber -ne '')
            $isBranch = $gitRef.StartsWith($heads)
            $isTag = $gitRef.StartsWith($tags)
            $types = ('development', 'production')
          #endregion

          #region variables
            $valid = $false
            $versionToSet = ''
          #endregion
        #endregion

        #region process
        try {
          LogInfo "------"
          LogInfo "Values"
          LogInfo "------"

          if ($versionSpecified -eq $true) {
            $valid = $true
            $versionToSet = $versionNumber

            LogInfo " - type    =   specified"
          }
          else {
            $valid = ($developmentVersion -ne '') -and ($productionVersion-ne '') -and ($gitRef -ne '')

            if ($valid -eq $false) {
              $message = "Input 'version-number' was not specified
              Therefore 'development-version', 'production-version' and 'git-ref'
              inputs are all required"

              throw new-object System.ArgumentException $message
            }  

            if (!$isBranch -and !$isTag) {
              throw new-object System.InvalidOperationException "'$gitref' is not currently supported"  
            }

            # use a switch here?

            if ($isBranch) {
              $valid = $true
              $versionToSet = $developmentVersion
              $branch = $gitRef.Replace($heads,'')

              LogInfo " - branch  = $branch"
              LogInfo " - type    = development"
            }

            if ($isTag) {
              $valid = $true
              $tag = $gitRef.Replace($tags,'')
              $isProduction = ($tag -match $productionTag)
              
              LogInfo " - tag     = $tag"

              if ($isProduction -eq $true) {
                LogInfo " - type    = production"
                $versionToSet = $productionVersion
              }
              else {
                LogInfo " - type    = development"
                $versionToSet = $developmentVersion
              } 
            }
          }  
        }
        catch [System.ArgumentException] {
          LogError $_
          $valid = $false
        }
        catch [System.InvalidOperationException] {
          LogError $_
          $valid = $false
        }
        catch {
          LogException "An unexpected error occurred: $_"
          LogException $_.ScriptStackTrace
          $valid = $false
        }
        #endregion

          if ($valid -eq $true) {
            LogInfo " - version = $versionToSet"                    

            $manifestVersionBefore = $(GetTextBetween(GetManifestVersion($manifestFilePath)))
            $manifestReplacement = 'Version="' + $versionToSet + '" Language='
            $content = [string]::join([environment]::newline, (get-content $manifestFilePath))
            $regex = New-Object System.Text.RegularExpressions.Regex $manifestRegex
            $regex.Replace($content, $manifestReplacement) | Out-File $manifestFilePath
            $manifestVersionAfter = $(GetTextBetween(GetManifestVersion($manifestFilePath)))

            $codeFilePathExists = [System.IO.File]::Exists($codeFilePath)

            if ($codeFilePathExists -eq $true) {
              $codeVersionBefore = $(GetTextBetween(GetCodeVersion($codeFilePath)))
              $codeReplacement = 'Version = "' + $versionToSet +'"'
              $content = [string]::join([environment]::newline, (get-content $codeFilePath))
              $regex = New-Object System.Text.RegularExpressions.Regex $codeRegex
              $regex.Replace($content, $codeReplacement) | Out-File $codeFilePath
              $codeVersionAfter =$(GetTextBetween(GetCodeVersion($codeFilePath)))
            }

            ShowResults `
              $manifestVersionBefore $manifestVersionAfter `
              $codeFilePathExists $codeVersionBefore $codeVersionAfter

            echo "::set-output name=version-number::$versionToSet"
          }

          LogInfo "Ended at $(Get-Date -Format $dateFormat)"
        #endregion
